Script started on Thu 11 Apr 2019 11:59:54 AM PDT
jackyj@CF165-11:~$ mkdir csci241
jackyj@CF165-11:~$ cd csci241
jackyj@CF165-11:~/csci241$ ls 
jackyj@CF165-11:~/csci241$ git close[K[Kne https://github.com/CSCI241Spring2019/lab-1- Julia-Jacky.git
Cloning into 'lab-1-Julia-Jacky'...
remote: Enumerating objects: 8, done.[K
remote: Counting objects:  12% (1/8)   [Kremote: Counting objects:  25% (2/8)   [Kremote: Counting objects:  37% (3/8)   [Kremote: Counting objects:  50% (4/8)   [Kremote: Counting objects:  62% (5/8)   [Kremote: Counting objects:  75% (6/8)   [Kremote: Counting objects:  87% (7/8)   [Kremote: Counting objects: 100% (8/8)   [Kremote: Counting objects: 100% (8/8), done.[K
remote: Compressing objects:  25% (1/4)   [Kremote: Compressing objects:  50% (2/4)   [Kremote: Compressing objects:  75% (3/4)   [Kremote: Compressing objects: 100% (4/4)   [Kremote: Compressing objects: 100% (4/4), done.[K
remote: Total 8 (delta 0), reused 8 (delta 0), pack-reused 0[K
Unpacking objects:  12% (1/8)   Unpacking objects:  25% (2/8)   Unpacking objects:  37% (3/8)   Unpacking objects:  50% (4/8)   Unpacking objects:  62% (5/8)   Unpacking objects:  75% (6/8)   Unpacking objects:  87% (7/8)   Unpacking objects: 100% (8/8)   Unpacking objects: 100% (8/8), done.
Checking connectivity... done.
jackyj@CF165-11:~/csci241$ git config-- [Kglobal user.name "Julkia[K[K[Kia Jackyt[K"
git: 'config--global' is not a git command. See 'git --help'.
jackyj@CF165-11:~/csci241$ cd lab-1-Julia-Jacky
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git config --global user.name "Juli a Jacky"
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git config -- global user.email jac kyj@wwu.edu
error: key does not contain a section: global
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git config --global user.email user name@wwu.edu
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ touch writeuo[Kp.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add writeup.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit -m "Added empty writeup" [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K"
[master d0f0fae] Added empty writeup
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 writeup.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git push origin mastd[Ker
Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects:  50% (1/2)   Compressing objects: 100% (2/2)   Compressing objects: 100% (2/2), done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 316 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   1523c09..d0f0fae  master -> master
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add writeup.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit -m "Added part 1 (names)  to writeup"
[master a2dce5d] Added part 1 (names) to writeup
 1 file changed, 1 insertion(+)
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git statud
git: 'statud' is not a git command. See 'git --help'.

Did you mean this?
	status
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	[31mmodified:   writeup.txt[m

no changes added to commit (use "git add" and/or "git commit -a")
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add writeupo[K.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	[32mmodified:   writeup.txt[m

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit " added part 2 (hobby) t o writeup"
error: pathspec ' added part 2 (hobby) to writeup' did not match any file(s) known to git.
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit -m " added part 2 to[K[K[K(hobby)  to writeup.txt"
[master 6232605]  added part 2(hobby) to writeup.txt
 1 file changed, 1 insertion(+)
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
nothing to commit, working directory clean
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git push writeup.xtx[K[K[Ktxt
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

fatal: Invalid gitfile format: writeup.txt
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git push origin master
Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects:  25% (1/4)   Compressing objects:  50% (2/4)   Compressing objects:  75% (3/4)   Compressing objects: 100% (4/4)   Compressing objects: 100% (4/4), done.
Writing objects:  16% (1/6)   Writing objects:  33% (2/6)   Writing objects:  50% (3/6)   Writing objects:  66% (4/6)   Writing objects:  83% (5/6)   Writing objects: 100% (6/6)   Writing objects: 100% (6/6), 557 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/2)   [Kremote: Resolving deltas: 100% (2/2)   [Kremote: Resolving deltas: 100% (2/2), completed with 1 local object.[K
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   d0f0fae..6232605  master -> master
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git staut[K[Kus
git: 'staus' is not a git command. See 'git --help'.

Did you mean this?
	status
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ touch username.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add username.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit 0[K-m "created username.xtt x[K\[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[Ktxt "
[master 9c78bf9] created username.txt
 1 file changed, 1 insertion(+)
 create mode 100644 username.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git pusy[Kh origin master
Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects:  50% (1/2)   Compressing objects: 100% (2/2)   Compressing objects: 100% (2/2), done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 370 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   6232605..9c78bf9  master -> master
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Forward-port local commits to the updated upstream head
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git staut[K[Ktus
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ gitmv[K[K mv Dummy.txt
usage: git mv [<options>] <source>... <destination>

    -v, --verbose         be verbose
    -n, --dry-run         dry run
    -f, --force           force move/rename even if target exists
    -k                    skip move/rename errors

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git mv Dummy.tct[K[Kxt newDummy.txt
fatal: not under version control, source=Dummy.txt, destination=newDummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git statud[Ks
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	[31mDummy.txt[m

nothing added to commit but untracked files present (use "git add" to track)
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame
usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>

    <rev-opts> are documented in git-rev-list(1)

    --incremental         Show blame entries as we find them, incrementally
    -b                    Show blank SHA-1 for boundary commits (Default: off)
    --root                Do not treat root commits as boundaries (Default: off)
    --show-stats          Show work cost statistics
    --score-debug         Show output score for blame entries
    -f, --show-name       Show original filename (Default: auto)
    -n, --show-number     Show original linenumber (Default: off)
    -p, --porcelain       Show in a format designed for machine consumption
    --line-porcelain      Show porcelain format with per-line commit information
    -c                    Use the same output mode as git-annotate (Default: off)
    -t                    Show raw timestamp (Default: off)
    -l                    Show long commit SHA1 (Default: off)
    -s                    Suppress author name and timestamp (Default: off)
    -e, --show-email      Show author email instead of name (Default: off)
    -w                    Ignore whitespace differences
    --minimal             Spend extra cycles to find better match
    -S <file>             Use revisions from <file> instead of calling git-rev-list
    --contents <file>     Use <file>'s contents as the final image
    -C[<score>]           Find line copies within and across files
    -M[<score>]           Find line movements within and across files
    -L <n,m>              Process only line range n,m, counting from 1
    --abbrev[=<n>]        use <n> digits to display SHA-1s

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ [Kjackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git log
[?1h=[33mcommit 9c78bf9b075e29eb66f89daa32fa667326dbe2cf[m[m
Author: Julia Jacky <username@wwu.edu>[m
Date:   Thu Apr 11 12:37:14 2019 -0700[m
[m
    created username.txt[m
[m
[33mcommit 62326059b468158d1a1eb05e0b43a6954d320ea9[m[m
Author: Julia Jacky <username@wwu.edu>[m
Date:   Thu Apr 11 12:30:43 2019 -0700[m
[m
     added part 2(hobby) to writeup.txt[m
[m
[33mcommit a2dce5d8419a1b8cc428b5fef306b6f45e88dcaf[m[m
Author: Julia Jacky <username@wwu.edu>[m
Date:   Thu Apr 11 12:24:09 2019 -0700[m
[m
    Added part 1 (names) to writeup[m
[m
[33mcommit d0f0fae3503a6c48bcb1ca701636c093decc4c0a[m[m
Author: Julia Jacky <username@wwu.edu>[m
Date:   Thu Apr 11 12:16:51 2019 -0700[m
[m
    Added empty writeup[m
[m
[33mcommit 1523c09e41bb264a6f420fcd78d1a7d6e44a5340[m[m
Author: majeskn <majeskn@wwu.edu>[m
Date:   Mon Jan 7 20:49:19 2019 -0800[m
[m
    Adding setup for gradle[m
[K[?1l>jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ cd Dummy.txt
bash: cd: Dummy.txt: Not a directory
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame Dummy.txt
fatal: no such path 'Dummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame newDummy.x[Ktxt
fatal: cannot stat path 'newDummy.txt': No such file or directory
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ [Kjackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git mv Dummy.txt newDummy.txt
fatal: not under version control, source=Dummy.txt, destination=newDummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git statud
git: 'statud' is not a git command. See 'git --help'.

Did you mean this?
	status
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	[31mDummy.txt[m

nothing added to commit but untracked files present (use "git add" to track)
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add Dummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git mv Dummy.txt newDummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame newDummy.txt
fatal: no such path 'newDummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git diff[Kblame[K[K[K[K[K[K[K[Kblame
usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>

    <rev-opts> are documented in git-rev-list(1)

    --incremental         Show blame entries as we find them, incrementally
    -b                    Show blank SHA-1 for boundary commits (Default: off)
    --root                Do not treat root commits as boundaries (Default: off)
    --show-stats          Show work cost statistics
    --score-debug         Show output score for blame entries
    -f, --show-name       Show original filename (Default: auto)
    -n, --show-number     Show original linenumber (Default: off)
    -p, --porcelain       Show in a format designed for machine consumption
    --line-porcelain      Show porcelain format with per-line commit information
    -c                    Use the same output mode as git-annotate (Default: off)
    -t                    Show raw timestamp (Default: off)
    -l                    Show long commit SHA1 (Default: off)
    -s                    Suppress author name and timestamp (Default: off)
    -e, --show-email      Show author email instead of name (Default: off)
    -w                    Ignore whitespace differences
    --minimal             Spend extra cycles to find better match
    -S <file>             Use revisions from <file> instead of calling git-rev-list
    --contents <file>     Use <file>'s contents as the final image
    -C[<score>]           Find line copies within and across files
    -M[<score>]           Find line movements within and across files
    -L <n,m>              Process only line range n,m, counting from 1
    --abbrev[=<n>]        use <n> digits to display SHA-1s

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame -n newDummy.txt
fatal: no such path 'newDummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame -L 1,2 newDummy.txt
fatal: no such path 'newDummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git diff newDummy
fatal: ambiguous argument 'newDummy': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git diff newDummy.txt
[?1h=[K[?1l>jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame
usage: git blame [<options>] [<rev-opts>] [<rev>] [--] <file>

    <rev-opts> are documented in git-rev-list(1)

    --incremental         Show blame entries as we find them, incrementally
    -b                    Show blank SHA-1 for boundary commits (Default: off)
    --root                Do not treat root commits as boundaries (Default: off)
    --show-stats          Show work cost statistics
    --score-debug         Show output score for blame entries
    -f, --show-name       Show original filename (Default: auto)
    -n, --show-number     Show original linenumber (Default: off)
    -p, --porcelain       Show in a format designed for machine consumption
    --line-porcelain      Show porcelain format with per-line commit information
    -c                    Use the same output mode as git-annotate (Default: off)
    -t                    Show raw timestamp (Default: off)
    -l                    Show long commit SHA1 (Default: off)
    -s                    Suppress author name and timestamp (Default: off)
    -e, --show-email      Show author email instead of name (Default: off)
    -w                    Ignore whitespace differences
    --minimal             Spend extra cycles to find better match
    -S <file>             Use revisions from <file> instead of calling git-rev-list
    --contents <file>     Use <file>'s contents as the final image
    -C[<score>]           Find line copies within and across files
    -M[<score>]           Find line movements within and across files
    -L <n,m>              Process only line range n,m, counting from 1
    --abbrev[=<n>]        use <n> digits to display SHA-1s

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame newDummy.txt
fatal: no such path 'newDummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ ls
build.gradle  newDummy.txt  src  username.txt  writeup.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	[32mnew file:   newDummy.txt[m

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git add newDummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	[32mnew file:   newDummy.txt[m

jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git blame newDummy.txt
fatal: no such path 'newDummy.txt' in HEAD
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit -,[Km ""[Kadded new Dummy"
[master 4329651] added new Dummy
 1 file changed, 1 insertion(+)
 create mode 100644 newDummy.txt
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git commit -m "added new Dummy"[9Pblame newDummy.txt
[?1h=43296519 (Julia Jacky 2019-04-11 13:37:20 -0700 1) Blah blah blah[m
[K[?1l>jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git diff 9c78bf9b075e29eb66f89daa32 fa667326dbe2cf[K[K[K[K[K[K[K[K[K[K[K[K[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K9c78bf9
[?1h=[1mdiff --git a/newDummy.txt b/newDummy.txt[m[m
[1mnew file mode 100644[m[m
[1mindex 0000000..0b623c3[m[m
[1m--- /dev/null[m[m
[1m+++ b/newDummy.txt[m[m
[36m@@ -0,0 +1 @@[m[m
[32m+[m[32mBlah blah blah[m[m
[K[?1l>jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git diff 9c78bf9 6232605
[?1h=[1mdiff --git a/username.txt b/username.txt[m[m
[1mdeleted file mode 100644[m[m
[1mindex 8e56de5..0000000[m[m
[1m--- a/username.txt[m[m
[1m+++ /dev/null[m[m
[36m@@ -1 +0,0 @@[m[m
[31m-Julia Jacky, jackyj, Julia-Jacky[m[m
[K[?1l>jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ git rm newDummy.txt
rm 'newDummy.txt'
jackyj@CF165-11:~/csci241/lab-1-Julia-Jacky$ exit
exit

Script done on Thu 11 Apr 2019 01:50:43 PM PDT
Script started on Sun 14 Apr 2019 11:13:36 AM PDT
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ touch Dummy[K[K[K[K[Kdummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git add [K[K[K[Kcommit -m " create;d [K[K[Kd dummy file" [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K"
[master 39bbcbd]  created dummy file
 1 file changed, 1 deletion(-)
 delete mode 100644 newDummy.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$  git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git commit -m " yo to empty [K[K[K[K[K[Kdummy file"
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Untracked files:
	[31mdummy2.txt[m
	[31mtypescript[m

nothing added to commit but untracked files present
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git [K[K[K[Kgit reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git push 
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Username for 'https://github.com': Julia-Javk  cky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 4, done.
Delta compression using up to 8 threads.
Compressing objects:  33% (1/3)   Compressing objects:  66% (2/3)   Compressing objects: 100% (3/3)   Compressing objects: 100% (3/3), done.
Writing objects:  25% (1/4)   Writing objects:  50% (2/4)   Writing objects:  75% (3/4)   Writing objects: 100% (4/4)   Writing objects: 100% (4/4), 441 bytes | 0 bytes/s, done.
Total 4 (delta 1), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/1)   [Kremote: Resolving deltas: 100% (1/1)   [Kremote: Resolving deltas: 100% (1/1), completed with 1 local object.[K
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   9c78bf9..39bbcbd  master -> master
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt[K[K[K[K
fatal: ambiguous argument 'dummy2': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout
Your branch is up-to-date with 'origin/master'.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2
error: pathspec 'dummy2' did not match any file(s) known to git.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2.txt
error: pathspec 'dummy2.txt' did not match any file(s) known to git.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git add dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git commit dummy[K[K[K[K[K-m " added dummy2"
[master 214dc5b]  added dummy2
 1 file changed, 3 insertions(+)
 create mode 100644 dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git push 
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects:  50% (1/2)   Compressing objects: 100% (2/2)   Compressing objects: 100% (2/2), done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 306 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/1)   [Kremote: Resolving deltas: 100% (1/1)   [Kremote: Resolving deltas: 100% (1/1), completed with 1 local object.[K
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   39bbcbd..214dc5b  master -> master
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git push commit -m " added dummy2"[11Padd dummy2.txt[5@checkout[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2
fatal: ambiguous argument 'dummy2': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dumm2.txt^?[K[K[K[K[K[Ky2.yt[K[Kycy[K[K[Ktxt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dumm2y.t[K[K[K[Kmy[K[K[K[Kmmy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git fchec[K[Ke[K[K[K[Kcheckout username
error: pathspec 'username' did not match any file(s) known to git.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout username.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git push
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Everything up-to-date
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout b[Kdummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ gitrest dumm[K[K[K[K[K[K[K[K[K[K[Kit reset dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt[3@checkou[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2.txt[3Prese[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt[3@checkou[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2.txt[3Prese[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git reset dummy2.txt[3@checkou[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout dummy2.txt[3Prese[C[C[C[C[C[C[C[C[C[C[C[C
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git rm dummy2.txt
rm 'dummy2.txt'
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git diff a2dce5d 6232605
[?1h=[1mdiff --git a/writeup.txt b/writeup.txt[m[m
[1mindex 5e988d1..db4bf28 100644[m[m
[1m--- a/writeup.txt[m[m
[1m+++ b/writeup.txt[m[m
[36m@@ -1 +1,2 @@[m[m
 1) Julia Jacky[m[m
[32m+[m[32m2) Hobby: watching movies[m[m
[K[?1l>jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout -b "[KnewB
D	dummy2.txt
Switched to a new branch 'newB'
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git checkout -b question3 
D	dummy2.txt
Switched to a new branch 'question3'
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ cd [K[K[Kgit add writeup.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git commit -m " Added song"
[question3 6268382]  Added song
 2 files changed, 1 insertion(+), 3 deletions(-)
 delete mode 100644 dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git oush[K[K[K[Kgit merge[K[K[K[K[K[K[K[K[Kmerge[K[K[K[K[Kcheckout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git merge question3
Updating 214dc5b..6268382
Fast-forward
 dummy2.txt  | 3 [31m---[m
 writeup.txt | 1 [32m+[m
 2 files changed, 1 insertion(+), 3 deletions(-)
 delete mode 100644 dummy2.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git branch -d qustio[K[K[K[K[Kuestion3
Deleted branch question3 (was 6268382).
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git add writeup.txt
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git commit " added a[K[K[K[K[K[K[Kdeleted bracn[K[Knch, merged  info"
error: pathspec ' deleted branch, merged info' did not match any file(s) known to git.
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ gi[K[Kgit vo[K[Kcommit -m,[K"deleted dn==[K[K[K[Kbranch, merge d info"
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Untracked files:
	[31mtypescript[m

nothing added to commit but untracked files present
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ git push
warning: push.default is unset; its implicit value has changed in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the traditional behavior, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

When push.default is set to 'matching', git will push local branches
to the remote branches that already exist with the same name.

Since Git 2.0, Git defaults to the more conservative 'simple'
behavior, which only pushes the current branch to the corresponding
remote branch that 'git pull' uses to update the current branch.

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Username for 'https://github.com': Julia-Jacky
Password for 'https://Julia-Jacky@github.com': 
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects:  33% (1/3)   Compressing objects:  66% (2/3)   Compressing objects: 100% (3/3)   Compressing objects: 100% (3/3), done.
Writing objects:  33% (1/3)   Writing objects:  66% (2/3)   Writing objects: 100% (3/3)   Writing objects: 100% (3/3), 333 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas:   0% (0/1)   [Kremote: Resolving deltas: 100% (1/1)   [Kremote: Resolving deltas: 100% (1/1), completed with 1 local object.[K
To https://github.com/CSCI241Spring2019/lab-1-Julia-Jacky.git
   214dc5b..6268382  master -> master
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ gradle build
[0m
Welcome to Gradle 5.0!

Here are the highlights of this release:
 - Kotlin DSL 1.0
 - Task timeouts
 - Dependency alignment aka BOM support
 - Interactive `gradle init`

For more details see https://docs.gradle.org/5.0/release-notes.html

Starting a Gradle Daemon (subsequent builds will be faster)


[2A[1B[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A[1m> Starting Daemon[m[17D[1B[1A> IDLE[0K[6D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B[1m> Evaluating settings[m[21D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% INITIALIZING [0s][m[36D[1B> IDLE[0K[6D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [0s][m[0K[35D[1B[1m> Loading projects[m[18D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project[m[0K[14D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project > Compiling /home/jackyj/csci241/lab-1-Julia-Jacky/build.gradle [m[79D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project > Compiling /home/jackyj/csci241/lab-1-Julia-Jacky/build.gradle [m[79D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project[m[0K[14D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project[m[14D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% CONFIGURING [1s][m[35D[1B[1m> root project[m[14D[1B[2A[1m<[0;32;1m=============[0;39;1m> 100% CONFIGURING [1s][m[37D[1B> IDLE[0K[6D[1B[2A[1m<[0;32;1m=============[0;39;1m> 100% CONFIGURING [1s][m[37D[2B[2A[1m<[0;32;1m=============[0;39;1m> 100% CONFIGURING [1s][m[37D[2B[2A[1m<[0;32;1;0;39;1m-------------> 0% EXECUTING [1s][m[0K[33D[2B[2A[1m<[0;32;1;0;39;1m-------------> 0% EXECUTING [2s][m[33D[1B[1m> :compileJava[m[14D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% EXECUTING [2s][m[33D[1B[1m> :compileJava[m[14D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% EXECUTING [2s][m[33D[1B[1m> :compileJava[m[14D[1B[2A[1m<[0;32;1m===[0;39;1m----------> 28% EXECUTING [2s][m[34D[1B[1m> :startScripts[m[15D[1B[2A[1m<[0;32;1m===[0;39;1m----------> 28% EXECUTING [2s][m[34D[1B[1m> :startScripts[m[15D[1B[2A[0K
[32;1mBUILD SUCCESSFUL[0;39m in 8s
5 actionable tasks: 5 executed
[0K
[0K
[2A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[1B> IDLE[6D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[2B[2A[2K[1B[2K[1A[0mjackyj@CF167-04:~/csci241/lab-1-Julia-Jacky$ cd '/home/jackyj/csci241/lab-1-Juli a-Jacky/src/main/java/lab1' 
jackyj@CF167-04:~/csci241/lab-1-Julia-Jacky/src/main/java/lab1$ gradle build
[0m
[1A
[1m> Task :buildEnvironment[m

[1m------------------------------------------------------------[m
[1mRoot project[m
[1m------------------------------------------------------------[m

[32mclasspath[39m
[33mNo dependencies[39m

A web-based, searchable dependency report is available by adding the [1m--scan[m option.

[32;1mBUILD SUCCESSFUL[0;39m in 0s
1 actionable task: 1 executed

[1A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[1B[1A[2K[0mjackyj@CF167-04:~/csci241/lab-1-Julia-Jacky/src/main/java/lab1$ gradle run [K
[0m

[1A[1m> Connecting to Daemon[m[22D[1B[2A
[31mFAILURE: [39m[31mBuild failed with an exception.[39m

* What went wrong:
Task 'run' not found in root project 'lab1'.

* Try:
Run [1mgradle tasks[m to get a list of available tasks. Run with [1m--stacktrace[m option to get the stack trace. Run with [1m--info[m or [1m--debug[m option to get more log output. Run with [1m--scan[m to get full insights.

* Get more help at [1mhttps://help.gradle.org[m

[31;1mBUILD FAILED[0;39m in 0s

[0K
[2A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[1B> IDLE[6D[1B[2A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[2B[2A[2K[1B[2K[1A[0mjackyj@CF167-04:~/csci241/lab-1-Julia-Jacky/src/main/java/lab1$ gradle build
[0m
[1m> Task :buildEnvironment[m

[1m------------------------------------------------------------[m
[1mRoot project[m
[1m------------------------------------------------------------[m

[32mclasspath[39m
[33mNo dependencies[39m

A web-based, searchable dependency report is available by adding the [1m--scan[m option.

[32;1mBUILD SUCCESSFUL[0;39m in 0s
1 actionable task: 1 executed
[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[2K[0mjackyj@CF167-04:~/csci241/lab-1-Julia-Jacky/src/main/java/lab1$ gradle run
[0m

[1A[1m> Connecting to Daemon[m[22D[1B[2A
[31mFAILURE: [39m[31mBuild failed with an exception.[39m

* What went wrong:
Task 'run' not found in root project 'lab1'.

* Try:
Run [1mgradle tasks[m to get a list of available tasks. Run with [1m--stacktrace[m option to get the stack trace. Run with [1m--info[m or [1m--debug[m option to get more log output. Run with [1m--scan[m to get full insights.

* Get more help at [1mhttps://help.gradle.org[m

[31;1mBUILD FAILED[0;39m in 0s

[0K
[2A[1m<[0;32;1;0;39;1m-------------> 0% WAITING[m[26D[1B[1m> Connecting to Daemon[m[22D[1B[2A[2K[1B[2K[1A[0mjackyj@CF167-04:~/csci241/lab-1-Julia-Jacky/src/main/java/lab1$ exit
exit

Script done on Sun 14 Apr 2019 01:10:51 PM PDT
